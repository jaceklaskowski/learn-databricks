-- Databricks notebook source
-- MAGIC %md # Generated Columns
-- MAGIC 
-- MAGIC [CREATE TABLE USING](https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-create-table-using.html)

-- COMMAND ----------

CREATE SCHEMA IF NOT EXISTS jacek_laskowski;
USE jacek_laskowski;

-- COMMAND ----------

CREATE OR REPLACE TABLE generated_columns (
  id BIGINT GENERATED ALWAYS AS IDENTITY,
  name STRING,
  five_by_default INT GENERATED ALWAYS AS (5))
USING delta

-- COMMAND ----------

-- MAGIC %md # SHOW CREATE TABLE
-- MAGIC 
-- MAGIC `SHOW CREATE TABLE` seems the only way to find out generated columns.

-- COMMAND ----------

SHOW CREATE TABLE generated_columns

-- COMMAND ----------

DESC TABLE EXTENDED generated_columns id

-- COMMAND ----------

-- MAGIC %md # Column Metadata

-- COMMAND ----------

-- MAGIC %scala
-- MAGIC 
-- MAGIC import org.apache.spark.sql.connector.catalog.TableCatalog
-- MAGIC import org.apache.spark.sql.connector.catalog.Identifier
-- MAGIC val table = spark.sessionState.catalogManager.currentCatalog.asInstanceOf[TableCatalog].loadTable(Identifier.of(Array("default"), "generated_columns"))
-- MAGIC 
-- MAGIC import com.databricks.sql.transaction.tahoe.catalog.DeltaTableV2
-- MAGIC table.asInstanceOf[DeltaTableV2].snapshot.tableDataSchema.map(_.metadata).foreach(println)

-- COMMAND ----------

-- MAGIC %md # Using High-Level API
-- MAGIC 
-- MAGIC Using the Developer API seems fruitless as column metadata (where generated column expressions are stored) is cleared up :(

-- COMMAND ----------

-- MAGIC %scala
-- MAGIC 
-- MAGIC import io.delta.tables.DeltaTable
-- MAGIC val dt = DeltaTable.forName("generated_columns")
-- MAGIC display(dt.toDF.schema.map(c => (c.name, c.dataType.sql, c.metadata.json)).toDF("name", "dataType", "metadata"))

-- COMMAND ----------

-- MAGIC %scala
-- MAGIC 
-- MAGIC val table = spark.sharedState.externalCatalog.getTable("default", "generated_columns")
-- MAGIC import org.apache.spark.sql.functions.from_json
-- MAGIC import org.apache.spark.sql.types._
-- MAGIC val metadata_schema = StructType.fromDDL("metadata map<string, string>")
-- MAGIC val schemaDf = table.schema
-- MAGIC   .map(c => (c.name, c.dataType.sql, c.metadata.json))
-- MAGIC   .toDF("name", "dataType", "metadata")
-- MAGIC   // FIXME How to display metadata as JSON using metadata_schema
-- MAGIC   //.withColumn("metadata", from_json($"metadata", metadata_schema))
-- MAGIC display(schemaDf)

-- COMMAND ----------

-- MAGIC %md # GENERATED AS IDENTITY Clause
-- MAGIC 
-- MAGIC ```antlr
-- MAGIC GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ ( [ START WITH start ] [ INCREMENT BY step ] ) ]
-- MAGIC ```
-- MAGIC 
-- MAGIC When you write to the table, and do not provide values for the identity column, it will be automatically assigned a unique and statistically increasing (or decreasing if step is negative) value. This clause is only supported for Delta Lake tables. This clause can only be used for columns with BIGINT data type.
-- MAGIC 
-- MAGIC Assigned values are unique but are not guaranteed to be contiguous. Both parameters are optional, and the default value is 1. step cannot be 0.
-- MAGIC 
-- MAGIC If the automatically assigned values are beyond the range of the identity column type, the query will fail.

-- COMMAND ----------

-- MAGIC %md ## BY DEFAULT

-- COMMAND ----------

CREATE TABLE ident (
  name string,
  id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 0 INCREMENT BY 1)
);
INSERT INTO ident (name) VALUES ('Juli'), ('Mark');
INSERT INTO ident (name, id) VALUES ('Dave', 5);
SELECT * FROM ident;

-- COMMAND ----------

INSERT INTO ident (name) VALUES ('Jacek');

-- COMMAND ----------

select * from ident;

-- COMMAND ----------

INSERT INTO ident (name) VALUES ('Agata');

-- COMMAND ----------

select * from ident ORDER BY id;

-- COMMAND ----------

-- MAGIC %md What's going to be `ID` value now?

-- COMMAND ----------

INSERT INTO ident (name) VALUES ("Guess what's the ID?");
SELECT * FROM ident;

-- COMMAND ----------

-- MAGIC %md ## ALWAYS

-- COMMAND ----------

-- MAGIC %md
-- MAGIC 
-- MAGIC * When ALWAYS is used, you cannot provide your own values for the identity column.

-- COMMAND ----------

-- MAGIC %md # GENERATED vs DEFAULT

-- COMMAND ----------

-- MAGIC %md
-- MAGIC 
-- MAGIC `GENERATED ALWAYS AS`
-- MAGIC 
-- MAGIC `GENERATED AS IDENTITY`
-- MAGIC 
-- MAGIC * This clause is only supported for Delta Lake tables

-- COMMAND ----------

-- MAGIC %md
-- MAGIC 
-- MAGIC `DEFAULT default_expression`
-- MAGIC 
-- MAGIC * Defines a `DEFAULT` value for the column which is used on `INSERT`, `UPDATE`, and `MERGE ... INSERT` when the column is not specified.
-- MAGIC * Supported for CSV, JSON, PARQUET, and ORC sources
-- MAGIC * If no default is specified `DEFAULT NULL` is applied for nullable columns.
-- MAGIC * `default_expression` may be composed of literals, and built-in SQL functions or operators
